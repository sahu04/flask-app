# name: trivy-scanning
# run-name: trivy-dockle-scanning
# on:
#   push:
#     branches: [ "master" ]
#   pull_request:
#     branches: [ "master" ]
  

# permissions: write-all

# jobs:
#   trivy-scanning-job:
#     name: trivy-sec-scan
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v3

#       - name: Build an image from Dockerfile
#         run: |
#           docker build -t docker.io/sahu04/flask-app:${{ github.sha }} .  
       
#       - name: Run Trivy vulnerability scanner(table-format)
#         uses: aquasecurity/trivy-action@master
#         with:
#           image-ref: 'docker.io/sahu04/flask-app:${{ github.sha }}'
#           format: 'table'
#           vuln-type: 'os,library'
#           severity: 'CRITICAL,HIGH'
          
#       - name: Run Trivy vulnerability scanner(json-format)
#         uses: aquasecurity/trivy-action@master
#         with:
#           image-ref: 'docker.io/sahu04/flask-app:${{ github.sha }}'
#           format: 'json'
#           output: 'trivy-results.json'
        
#       - name: Upload Report
#         uses: actions/upload-artifact@v3
#         if: always()
#         with:
#           name: Trivy-report
#           path: trivy-results.json

#       - name: Run Trivy vulnerability scanner(sarif-format)
#         uses: aquasecurity/trivy-action@master
#         with:
#           image-ref: 'docker.io/sahu04/flask-app:${{ github.sha }}'
#           format: 'sarif'
#           output: 'trivy-results.sarif'
#       - name: Upload Trivy scan results to GitHub Security tab
#         uses: github/codeql-action/upload-sarif@v3
#         if: always()
#         with:
#           sarif_file: 'trivy-results.sarif'

#     #Docle scan 
#       - name: Run dockle(json-format)
#         uses: goodwithtech/dockle-action@main
#         with:
#           image: 'docker.io/sahu04/flask-app:${{ github.sha }}'
#           format: 'json'
#           output: 'dockle-result.json'
#           exit-code: '0'
#       - name: Upload Report
#         uses: actions/upload-artifact@v3
#         if: always()
#         with:
#           name: Dockle-report
#           path: dockle-result.json

#       - name: Run dockle(sarif-format)
#         uses: goodwithtech/dockle-action@main
#         with:
#           image: 'docker.io/sahu04/flask-app:${{ github.sha }}'
#           format: 'sarif'
#           output: 'dockle-result.sarif'
#           exit-code: '0'

#       - name: Uploadd Dockle scan results to GitHub Security tab
#         uses: github/codeql-action/upload-sarif@v3
#         if: always()
#         with:
#           sarif_file: 'dockle-result.sarif'

# name: Build and Push Docker Image

# on:
#   push:
#     branches: 
#       - master
#     paths:
#       - '**/Dockerfile'
#   pull_request:
#     branches: 
#       - master
#     paths:
#       - '**/Dockerfile'

# jobs:
#   build:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Log in to Docker Hub
#         uses: docker/login-action@v1
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}

#       - name: Build and push Docker image
#         uses: docker/build-push-action@v2
#         with:
#           context: .
#           file: ./Dockerfile
#           push: true
#           tags: |
#            dikshasahu/flask-app:dev
#            dikshasahu/flask-app:${{ github.sha }}


# name: Build and Push Docker Image to ECR

# on:
#   push:
#     branches: 
#       - master
#     # paths:
#     #   - '**/Dockerfile'
#   pull_request:
#     branches: 
#       - master
#     # paths:
#     #   - '**/Dockerfile'
# env:
#   AWS_REGION: ap-south-1                 # set this to your preferred AWS region, e.g. us-west-1
#   ECR_REPOSITORY: flask-app         # set this to your Amazon ECR repository name

# jobs:
#   build:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v2
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ap-south-1  # Replace with your desired region

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v1

#       - name: Build, tag, and push image to Amazon ECR
#         id: build-image
#         env:
#          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#          IMAGE_TAG: ${{ github.sha }}
#         run: |
        
#            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#            echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT


# name: Build and Push Docker Images to ECR

# on:
#   push:
#     branches:
#       - develop
#       - master
  
#   pull_request:
#     branches:
#       - develop
#       - master
   

# env:
#   AWS_REGION: ap-south-1
#   AWS_ACCOUNT_ID: 972720899290
#   ECR_REPOSITORY: flask-app

# jobs:
#   build-dev-image:
#     runs-on: ubuntu-latest
#     # if: github.ref == 'refs/heads/develop' && github.event_name == 'push' && contains(github.event.compare, 'null')

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v2
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ env.AWS_REGION }}

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v1

#       - name: Build and push the tagged Docker image to Amazon ECR
#         env:
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           IMAGE_TAG: dev
#         run: |
#           docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#           docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
 
#   build-prod-image:
#    runs-on: ubuntu-latest
#    steps:
#     - name: Checkout code
#       uses: actions/checkout@v2

#     - name: Configure AWS credentials
#       uses: aws-actions/configure-aws-credentials@v2
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: ${{ env.AWS_REGION }}

#     - name: Login to Amazon ECR
#       id: login-ecr
#       uses: aws-actions/amazon-ecr-login@v1

#     - name: Pull the dev Docker image from Amazon ECR
#       env:
#         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#         IMAGE_TAG: dev
#       run: |
#         docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#         echo "Dev image pulled successfully"

#     - name: List Docker images
#       run: docker images

#     - name: Tag the dev Docker image as prod
#       env:
#         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#         IMAGE_TAG: dev
#       run: |
#         docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:prod
#         echo "Dev image tagged as prod"
#     - name: List Docker images
#       run: docker images


#     - name: Push the tagged prod Docker image to Amazon ECR
#       env:
#         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#         IMAGE_TAG: prod
#       run: |
#         docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#         echo "Prod image pushed successfully"

name: Build and Push Docker Images to ECR

on:
  push:
    branches:
      - master
      - develop
  pull_request:
    branches:
      - master
      - develop

env:
  AWS_REGION: ap-south-1
  AWS_ACCOUNT_ID: 972720899290
  ECR_REPOSITORY: flask-app

jobs:
  build-dev-image:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Check for Dockerfile changes
        id: check-dockerfile
        run: |
            if: github.ref == 'refs/heads/develop' && github.event.head_commit.modified | contains('Dockerfile')
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push the tagged Docker image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: dev
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
 
  # build-prod-image:
  #   runs-on: ubuntu-latest

  #   if: github.ref == 'refs/heads/master' && (github.event_name == 'push' || github.event_name == 'pull_request')

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v2
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ env.AWS_REGION }}

  #     - name: Login to Amazon ECR
  #       id: login-ecr
  #       uses: aws-actions/amazon-ecr-login@v1

  #     - name: Pull the dev Docker image from Amazon ECR
  #       env:
  #         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
  #         IMAGE_TAG: dev
  #       run: |
  #         docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
  #         echo "Dev image pulled successfully"

  #     - name: List Docker images
  #       run: docker images

  #     - name: Tag the dev Docker image as prod
  #       env:
  #         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
  #         IMAGE_TAG: dev
  #       run: |
  #         docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:prod
  #         echo "Dev image tagged as prod"

  #     - name: List Docker images
  #       run: docker images

  #     - name: Push the tagged prod Docker image to Amazon ECR
  #       env:
  #         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
  #         IMAGE_TAG: prod
  #       run: |
  #         docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
  #         echo "Prod image pushed successfully"
